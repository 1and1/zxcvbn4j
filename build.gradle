plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.12.0'
}

group = 'com.nulab-inc'
version = '1.5.2'
archivesBaseName = 'zxcvbn'
sourceCompatibility = 1.7
targetCompatibility = 1.7
ext.moduleName = 'com.nulabinc.zxcvbn'
ext.isReleaseVersion = !version.endsWith('SNAPSHOT')

wrapper {
    gradleVersion = '7.2'
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
}

javadoc {
    options.locale = 'en_US'
    title = 'zxcvbn4j ' + version + ' API'
}

// Turning off doclint in JDK 8 Javadoc
// ref : http://blog.joda.org/2014/02/turning-off-doclint-in-jdk-8-javadoc.html
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

jar {
    inputs.property("moduleName", moduleName)

    manifest {
        attributes 'Implementation-Title': archivesBaseName, 'Implementation-Version': archiveVersion, 'Automatic-Module-Name': moduleName
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

configurations {
    deployerJars
}

if (project.hasProperty("signing.keyId")) {
    signing {
        // Skip signing snapshot archives
        if (System.env.GITHUB_ACTIONS || !isReleaseVersion) return

        sign publishing.publications.mavenJava
    }
}

publishing {
    repositories {
        maven {
            // Skip uploading production archives when using github actions
            if (System.env.GITHUB_ACTIONS && isReleaseVersion) return

            def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
            url = isReleaseVersion ? releasesRepoUrl : snapshotsRepoUrl
            credentials {
                username = project.hasProperty('ossrhUsername') ? ossrhUsername : 'Unknown user'
                password = project.hasProperty('ossrhPassword') ? ossrhPassword : 'Unknown password'
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                name = 'zxcvbn4j'
                artifactId = archivesBaseName
                packaging = 'jar'
                description = 'This is a java port of zxcvbn, which is a JavaScript password strength generator.'
                url = 'https://github.com/nulab/zxcvbn4j'

                scm {
                    connection = 'https://github.com/nulab/zxcvbn4j.git'
                    developerConnection = 'https://github.com/nulab/zxcvbn4j.git'
                    url = 'https://github.com/nulab/zxcvbn4j.git'
                }

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'http://www.opensource.org/licenses/mit-license.php'
                    }
                }

                developers {
                    developer {
                        id = 'vvatanabe'
                        name = 'Yuichi Watanabe'
                        email = 'yuichi.watanabe@nulab-inc.com'
                    }
                }
            }
        }
    }
}

test {
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    forkEvery = 4
    testLogging.showStandardStreams = true
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true // coveralls plugin depends on xml format report
        html.required = true
    }
}